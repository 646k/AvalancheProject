{
 "Vertex": "#version 430\r\n#define vec1 float\r\n#define uvec1 uint\r\n#define ivec1 int\r\nout gl_PerVertex {\r\nvec4 gl_Position;\r\nfloat gl_PointSize;\r\nfloat gl_ClipDistance[];};\r\nuniform \tvec2 FBOFlip;\r\n in  vec2 in_vsCoord0;\r\nvec2 Input0;\r\n#undef Output0\r\n#define Output0 phase0_Output0\r\nvec4 phase0_Output0;\r\n out  vec2 TexCoord0;\r\nvec4 Output1;\r\nvec4 Temp[1];\r\nivec4 Temp_int[1];\r\nuvec4 Temp_uint[1];\r\nvoid main()\r\n{\r\n    Input0 = in_vsCoord0;\r\n    Output0.xy = Input0.xy;\r\n    Output0.zw = vec2(intBitsToFloat(0x0), intBitsToFloat(0x3F800000));\r\n    Temp[0].xy = Input0.xy * FBOFlip.xy;\r\n    Temp[0].xy = Temp[0].xy * vec2(intBitsToFloat(0x3F800000), intBitsToFloat(int(0xBF800000))) + vec2(intBitsToFloat(0x3F800000), intBitsToFloat(0x3F800000));\r\n    Output1.xy = Temp[0].xy * vec2(intBitsToFloat(0x3F000000), intBitsToFloat(0x3F000000));\r\n    gl_Position = vec4(phase0_Output0);\r\nTexCoord0.xy = Output1.xy;\r\n    return;\r\n}\r\n",
 "Fragment": "#version 430\r\n#define vec1 float\r\n#define uvec1 uint\r\n#define ivec1 int\r\nuniform \tfloat Time;\r\nuniform sampler2D SrcTex;\r\nuniform sampler2D SrcDistanceField;\r\n in  vec2 TexCoord0;\r\nvec2 Input1;\r\nlayout(location = 0) out  vec4 SV_Target0;\r\n#define Output0 SV_Target0\r\nvec4 Temp[3];\r\nivec4 Temp_int[3];\r\nuvec4 Temp_uint[3];\r\nvoid main()\r\n{\r\n    Input1 = TexCoord0;\r\n    Temp[0].x = Time * intBitsToFloat(int(0x40800000));\r\n    Temp[0].x = cos(Temp[0].x);\r\n    Temp[0].x = Temp[0].x * intBitsToFloat(0x3F000000) + Time;\r\n    Temp[1].x = (vec2(textureSize(SrcTex, 0x0)).x);\r\n    Temp[1].y = (vec2(textureSize(SrcTex, 0x0)).y);\r\n    Temp[1].z = (0.0);\r\n    Temp[1].w = float(textureQueryLevels(SrcTex));\r\n    Temp[2] = texture(SrcDistanceField, Input1.xy);\r\n    Temp[0].yz = Temp[1].xy * Temp[2].xy;\r\n    Temp[1].xy = Temp[2].xy + Input1.xy;\r\n    Temp[1] = texture(SrcTex, Temp[1].xy);\r\n    Temp[0].y = dot(Temp[0].yz, Temp[0].yz);\r\n    Temp[0].y = sqrt(Temp[0].y);\r\n    Temp[0].z = Temp[0].y * intBitsToFloat(int(0x41C80000));\r\n    Temp[0].y = uintBitsToFloat((intBitsToFloat(0x0)<Temp[0].y) ? 0xFFFFFFFFu : 0u);\r\n    Temp[0].z = inversesqrt(Temp[0].z);\r\n    Temp[0].z = float(intBitsToFloat(0x3F800000)) \/ Temp[0].z;\r\n    Temp[0].x = Temp[0].x * intBitsToFloat(int(0x40800000)) + (-Temp[0].z);\r\n    Temp[0].x = cos(Temp[0].x);\r\n    Temp[0].x = Temp[0].x + intBitsToFloat(0x3F800000);\r\n    Temp[0].x = Temp[0].x * intBitsToFloat(0x3F000000);\r\n    Temp[0].xzw = Temp[0].xxx * Temp[1].xyz;\r\n    Output0.xyz = (floatBitsToInt(Temp[0]).yyyy.x != 0) ? Temp[0].xzw : Temp[1].xyz;\r\n    Output0.w = intBitsToFloat(0x3F800000);\r\n    return;\r\n}\r\n",
 "Name": "resolve"
}