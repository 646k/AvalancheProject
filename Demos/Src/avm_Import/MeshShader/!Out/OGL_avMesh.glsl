{
 "Vertex": "#version 330\r\nstruct vec1 {\r\n\tfloat x;\r\n};\r\nstruct uvec1 {\r\n\tuint x;\r\n};\r\nstruct ivec1 {\r\n\tint x;\r\n};\r\nuniform \tmat4 M_Matrix;\r\nuniform \tmat4 MVP_Matrix;\r\nuniform \tmat4 MV_Matrix;\r\nuniform \tmat4 P_Matrix;\r\nuniform \tmat4 M_InverseMatrix;\r\nuniform \tmat4 MVP_InverseMatrix;\r\nuniform \tmat4 MV_InverseMatrix;\r\nuniform \tmat4 P_InverseMatrix;\r\nuniform \tmat4 VP_Matrix;\r\nuniform \tmat4 VP_InverseMatrix;\r\nuniform \tmat4 V_Matrix;\r\nuniform \tmat4 V_InverseMatrix;\r\nuniform \tvec2 FBOFlip;\r\nuniform \tfloat BonePixelHeight;\r\nuniform sampler2D BoneTransform;\r\n in  vec4 in_vsCoord0;\r\nvec4 Input0;\r\n in  vec4 in_vsNormal0;\r\nvec4 Input1;\r\n in  vec4 in_vsWIndex0;\r\nvec4 Input3;\r\n in  vec4 in_vsWeight0;\r\nvec4 Input4;\r\n#undef Output0\r\n#define Output0 phase0_Output0\r\nvec4 phase0_Output0;\r\n out  vec4 vCoord0;\r\n#define Output1 vCoord0\r\n out  vec4 vNorm0;\r\n#define Output2 vNorm0\r\nvec4 Temp[7];\r\nivec4 Temp_int[7];\r\nuvec4 Temp_uint[7];\r\nvoid main()\r\n{\r\n    Input0 = in_vsCoord0;\r\n    Input1 = in_vsNormal0;\r\n    Input3 = in_vsWIndex0;\r\n    Input4 = in_vsWeight0;\r\n    Temp[0] = uintBitsToFloat(uvec4(greaterThanEqual(Input3, vec4(intBitsToFloat(0x0), intBitsToFloat(0x0), intBitsToFloat(0x0), intBitsToFloat(0x0)))) * 0xFFFFFFFFu);\r\n    if((floatBitsToUint(Temp[0]).x)!=0u){\r\n        Temp[0].x = Input3.x + intBitsToFloat(0x3F000000);\r\n        Temp[1].x = Temp[0].x * BonePixelHeight;\r\n        Temp[1].yzw = vec3(intBitsToFloat(0x3E000000), intBitsToFloat(0x3EC00000), intBitsToFloat(0x3F200000));\r\n        Temp[2] = textureLod(BoneTransform, Temp[1].yx, intBitsToFloat(0x0));\r\n        Temp[3] = textureLod(BoneTransform, Temp[1].zx, intBitsToFloat(0x0));\r\n        Temp[1] = textureLod(BoneTransform, Temp[1].wx, intBitsToFloat(0x0));\r\n        Temp[2] = Temp[2] * Input4.xxxx;\r\n        Temp[3] = Temp[3] * Input4.xxxx;\r\n        Temp[1] = Temp[1] * Input4.xxxx;\r\n    } else {\r\n        Temp[2] = vec4(intBitsToFloat(0x3F800000), intBitsToFloat(0x0), intBitsToFloat(0x0), intBitsToFloat(0x0));\r\n        Temp[3] = vec4(intBitsToFloat(0x0), intBitsToFloat(0x3F800000), intBitsToFloat(0x0), intBitsToFloat(0x0));\r\n        Temp[1] = vec4(intBitsToFloat(0x0), intBitsToFloat(0x0), intBitsToFloat(0x3F800000), intBitsToFloat(0x0));\r\n    \/\/ENDIF\r\n    }\r\n    if((floatBitsToUint(Temp[0]).y)!=0u){\r\n        Temp[0].x = Input3.y + intBitsToFloat(0x3F000000);\r\n        Temp[4].x = Temp[0].x * BonePixelHeight;\r\n        Temp[4].yzw = vec3(intBitsToFloat(0x3E000000), intBitsToFloat(0x3EC00000), intBitsToFloat(0x3F200000));\r\n        Temp[5] = textureLod(BoneTransform, Temp[4].yx, intBitsToFloat(0x0));\r\n        Temp[6] = textureLod(BoneTransform, Temp[4].zx, intBitsToFloat(0x0));\r\n        Temp[4] = textureLod(BoneTransform, Temp[4].wx, intBitsToFloat(0x0));\r\n        Temp[2] = Temp[5] * Input4.yyyy + Temp[2];\r\n        Temp[3] = Temp[6] * Input4.yyyy + Temp[3];\r\n        Temp[1] = Temp[4] * Input4.yyyy + Temp[1];\r\n    \/\/ENDIF\r\n    }\r\n    if((floatBitsToUint(Temp[0]).z)!=0u){\r\n        Temp[0].x = Input3.z + intBitsToFloat(0x3F000000);\r\n        Temp[4].x = Temp[0].x * BonePixelHeight;\r\n        Temp[4].yzw = vec3(intBitsToFloat(0x3E000000), intBitsToFloat(0x3EC00000), intBitsToFloat(0x3F200000));\r\n        Temp[5] = textureLod(BoneTransform, Temp[4].yx, intBitsToFloat(0x0));\r\n        Temp[6] = textureLod(BoneTransform, Temp[4].zx, intBitsToFloat(0x0));\r\n        Temp[4] = textureLod(BoneTransform, Temp[4].wx, intBitsToFloat(0x0));\r\n        Temp[2] = Temp[5] * Input4.zzzz + Temp[2];\r\n        Temp[3] = Temp[6] * Input4.zzzz + Temp[3];\r\n        Temp[1] = Temp[4] * Input4.zzzz + Temp[1];\r\n    \/\/ENDIF\r\n    }\r\n    if((floatBitsToUint(Temp[0]).w)!=0u){\r\n        Temp[0].x = Input3.w + intBitsToFloat(0x3F000000);\r\n        Temp[0].x = Temp[0].x * BonePixelHeight;\r\n        Temp[0].yzw = vec3(intBitsToFloat(0x3E000000), intBitsToFloat(0x3EC00000), intBitsToFloat(0x3F200000));\r\n        Temp[4] = textureLod(BoneTransform, Temp[0].yx, intBitsToFloat(0x0));\r\n        Temp[5] = textureLod(BoneTransform, Temp[0].zx, intBitsToFloat(0x0));\r\n        Temp[0] = textureLod(BoneTransform, Temp[0].wx, intBitsToFloat(0x0));\r\n        Temp[2] = Temp[4] * Input4.wwww + Temp[2];\r\n        Temp[3] = Temp[5] * Input4.wwww + Temp[3];\r\n        Temp[1] = Temp[0] * Input4.wwww + Temp[1];\r\n    \/\/ENDIF\r\n    }\r\n    Temp[0].xyz = Input0.xyz;\r\n    Temp[0].w = intBitsToFloat(0x3F800000);\r\n    Temp[2].x = dot(Temp[2], Temp[0]);\r\n    Temp[2].y = dot(Temp[3], Temp[0]);\r\n    Temp[0].x = dot(Temp[1], Temp[0]);\r\n    Temp[0].yzw = Temp[2].yyy * V_Matrix[1].xyz;\r\n    Temp[0].yzw = V_Matrix[0].xyz * Temp[2].xxx + Temp[0].yzw;\r\n    Temp[0].xyz = V_Matrix[2].xyz * Temp[0].xxx + Temp[0].yzw;\r\n    Temp[0].xyz = Temp[0].xyz + V_Matrix[3].xyz;\r\n    Temp[0].w = dot(Input1.xyz, Input1.xyz);\r\n    Temp[0].w = inversesqrt(Temp[0].w);\r\n    Temp[1].xyz = Temp[0].www * Input1.xyz;\r\n    Temp[2].xyz = Temp[1].yyy * V_Matrix[1].xyz;\r\n    Temp[1].xyw = V_Matrix[0].xyz * Temp[1].xxx + Temp[2].xyz;\r\n    Output2.xyz = V_Matrix[2].xyz * Temp[1].zzz + Temp[1].xyw;\r\n    Temp[1] = Temp[0].yyyy * P_Matrix[1];\r\n    Temp[1] = P_Matrix[0] * Temp[0].xxxx + Temp[1];\r\n    Temp[1] = P_Matrix[2] * Temp[0].zzzz + Temp[1];\r\n    Output0 = Temp[1] + P_Matrix[3];\r\n    Output1.xyz = Temp[0].xyz;\r\n    gl_Position = vec4(phase0_Output0);\r\n    return;\r\n}\r\n",
 "Fragment": "#version 330\r\nstruct vec1 {\r\n\tfloat x;\r\n};\r\nstruct uvec1 {\r\n\tuint x;\r\n};\r\nstruct ivec1 {\r\n\tint x;\r\n};\r\n in  vec4 vCoord0;\r\nvec4 Input1;\r\n in  vec4 vNorm0;\r\nvec4 Input2;\r\nlayout(location = 0) out  vec4 SV_Target0;\r\n#define Output0 SV_Target0\r\nvec4 Temp[2];\r\nivec4 Temp_int[2];\r\nuvec4 Temp_uint[2];\r\nvoid main()\r\n{\r\n    Input1 = vCoord0;\r\n    Input2 = vNorm0;\r\n    Temp[0].x = dot(Input2.xyz, Input2.xyz);\r\n    Temp[0].x = inversesqrt(Temp[0].x);\r\n    Temp[0].xyz = Temp[0].xxx * Input2.xyz;\r\n    Temp[0].w = dot(Input1.xyz, Input1.xyz);\r\n    Temp[0].w = inversesqrt(Temp[0].w);\r\n    Temp[1].xyz = Temp[0].www * Input1.xyz;\r\n    Temp[0].x = dot((-Temp[0].xyz), Temp[1].xyz);\r\n    Output0.xyz = Temp[0].xxx + vec3(intBitsToFloat(0x3DCCCCCD), intBitsToFloat(0x3DCCCCCD), intBitsToFloat(0x3DCCCCCD));\r\n    Output0.w = intBitsToFloat(0x3F800000);\r\n    return;\r\n}\r\n",
 "Name": "avMesh"
}